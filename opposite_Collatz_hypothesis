
def check_if_integer(number): '''
    Проверить, является ли number целым числом, 
    путем определения остатка от деления на 1 
    '''
    if number % 1 == 0: 
        return True
    else:
        return False

def pop_last_item(input_list):
# Извлекает и удаляет последний символ из input_list list_length = len(input_list)
    last_item = input_list[list_length−1]
    del input_list[list_length−1]
    return last_item

Inverse_collatz_conjecture(shape):
    '''
    Преобразовать входную строку в список символов и инициализировать x значением 1.0
    '''
    shape_list = list(shape)
    x = 1.0
    # Цикл по символам в списке while shape_list:
    item = pop_last_item(shape_list) if item == 'd':
    '''
    Удвоить значение x, если текущий символ 'd'
    '''
        x *= 2
    elif item == 'u':
        '''
        Уменьшить значение x, согласно обратной гипотезе Коллатца, если текущий символ 'u'
        '''
        prev = (x − 1) / 3
        is_integer = check_if_integer(prev)
        '''
        Если prev имеет целочисленное значение, то присвоить его переменной x
        '''
        if is_integer:
            x = prev else:
# Если значение не является целым числом, то вернуть None return None
# Если x равно 0 или входная строка пустая if x == 0 or not shape:
return None
true_answer = '' num = x
'''
Вычисление правильного ответа согласно прямой гипотезе Коллатца '''

2.5. Подсчет правильных прямых углов
В двумерной сетке с целочисленными координатами узлов правильный прямой угол определяется тремя точками (x, y), (x, y+h) и (x+h, y) для некото- рого значения h больше 0. Эти точки образуют фигуру, напоминающую сто- лярный угольник или шеврон, направленный углом влево и вниз, причем точка (x, y) соответствует острию угла, а (x, y+h) и (x+h, y) определяют кон- цы крыльев одинаковой длины и параллельные осям координат. Напишите функцию, которая принимает список точек, отсортированных по их коорди- натам x, и возвращает количество правильных прямых углов. В табл. 2.5 по- казаны ожидаемые результаты для некоторых входных данных.
Таблица 2.5. Некоторые ожидаемые результаты для разных входных значений в задаче подсчета правильных прямых углов
[(1, 1), (3, 5), (5, 2)] 0 [(0, 4), (0, 16), (2, 2), (2, 5), (5, 2), (9, 13)] 1 [(1, 3), (1, 7), (5, 3), (5, 5), (7, 3)] 2
Алгоритм
Алгоритм подсчета правильных прямых углов отыскивает все комби- нации из трех точек в списке, которые образуют угол в форме столярного угольника или шеврона, как описано в постановке задачи. Для поиска ре- шения используется следующий алгоритм.
1. Переменная counter инициализируется значением 0. 2. Выполняется обход списка точек во вложенном цикле.
2.5.﻿Подсчет﻿правильных﻿прямых﻿углов﻿  27
 62
63
64
65
66
67
68
69
70
71
72
73
74
while num != 1:
if num % 2 == 0:
true_answer += 'd'
num /= 2
elif num % 2 == 1:
true_answer += 'u ' num = 3 * num + 1
# Сравнить вычисленный и ожидаемый ответы if true_answer == shape:
return int(x) else:
return None